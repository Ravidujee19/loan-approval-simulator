services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: applicant-evaluator-api
    env_file:
      - example.env
    depends_on:
      postgres:
        condition: service_healthy   # wait for DB readiness
      redis:
        condition: service_healthy   # wait for Redis readiness
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "python - << 'PY'\nimport sys,urllib.request\ntry:\n  urllib.request.urlopen('http://0.0.0.0:8000/api/v1/health/live', timeout=3)\n  sys.exit(0)\nexcept Exception:\n  sys.exit(1)\nPY"]
      interval: 10s
      timeout: 5s
      retries: 5
    read_only: true     # extra security – container FS read-only
    tmpfs:              # allow only temporary writable dirs
      - /tmp
      - /srv/var
    restart: unless-stopped

  ui:
    build:
      context: ./loan-ui
    container_name: loan-ui
    env_file:
      - loan-ui/.env.example
    ports:
      - "5173:5173"
    depends_on:
      - api
    environment:
      # ensure Vite listens on all interfaces in container
      - HOST=0.0.0.0
      - PORT=5173
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: pg
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: evaluator
    ports:
      - "5433:5432"   # host 5433 -> container 5432 (avoid local conflicts)
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d evaluator"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  adminer:
    image: adminer:4
    container_name: adminer
    ports:
      - "8081:8080"   # host 8081 → container 8080 (avoid collisions)
    depends_on:
      - postgres
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:        
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  pgdata:


